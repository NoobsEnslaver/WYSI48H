* Парсинг

** Простейший парсер
Давайте попробуем написать очень простой синтаксический анализатор. Мы
будем использовать библиотеку [[http://www.cs.uu.nl/~daan/download/parsec/parsec.html][Parsec]] (Установите parsec, если вы еще
не сделали этого, самостоятельно или в составе Haskell Platform.).

Начнем мы с добавления следующей строки в секцию импорта:

#+begin_src haskell
  import Text.ParserCombinators.Parsec hiding (spaces)
#+end_src

Это позволит нам использовать функции из библиотеки Parsec, за
исключением функции spaces, потому что ее имя будет конфликтовать с
функцией, которую мы определим чуть позднее.  

Теперь определим синтаксический анализатор, который будет распознавать
символы, разрешенные для определения идентификаторов в Scheme:

#+begin_src haskell
  symbol :: Parser Char
  symbol = oneOf "!#$%&|*+-/:<=>?@^_~"
#+end_src

Это еще один пример монады: в данном случае «дополнительная
информация», которая скрыта, это информация о позиции в входном потоке
данных, о предыдущей записи, о первом и последующих наборах и
т. д. Parsec позаботится обо всем за нас. Нам нужно лишь
воспользоваться функцией [[http://www.cs.uu.nl/~daan/download/parsec/parsec.html#oneOf][oneOf]] из библиотеки Parsec, и она разберет
символы в переданной ей строке. Parsec предоставляет множество готовых
синтаксических анализаторов: например, [[http://www.cs.uu.nl/~daan/download/parsec/parsec.html#letter][letter]] и [[http://www.cs.uu.nl/~daan/download/parsec/parsec.html#digit][digit]]. Вы так же
можете создавать более сложные синтаксические анализаторы из более
простых.

Определим функцию, которая будет вызывать наш синтаксический
анализатор и отлавливать все возможные ошибки:
#+begin_src haskell
  readExpr :: String -> String
  readExpr input = case parse symbol "lisp" input of
    Left err -> "No match: " ++ show err
    Right val -> "Found value"
#+end_src

Из сигнатуры функции вы можете видеть, что =readExpr= это функция (->)
из String в String. Мы назвали параметр =input= и передали его дальше,
вместе с синтаксическим анализатором =symbol=, определенным ранее, в
функцию [[http://www.cs.uu.nl/~daan/download/parsec/parsec.html#parse][parse]] из библиотеки Parsec. Второй параметр функции =nparse=
это имя для передаваемых данных. Оно используется для вывода сообщений
об ошибках.

=parse= может вернуть либо разобранное значение, либо ошибку, так что
нам нужно иметь возможность отлавливать ошибки. Следуя принятым в
Haskell соглашениям, Parsec возвращает тип [[http://www.haskell.org/onlinereport/standard-prelude.html#$tEither][Either]], в котором
конструктор =Left= используется для указания на ошибку, а конструктор
=Right= для возврата нормального значения.

Используем конструкцию =case...of=, чтобы проверить, какой результат
вернула функция parse. Если мы получили значение Left (ошибка), то
присваиваем ошибке имя =err= и возвращаем «No match» с текстовым
представлением ошибки. Если же мы получили значение Right, то
присваиваем значению имя =val= и, игнорируя его, возвращаем строку
«Found value».

Конструкция =case...of= это пример сравнения с шаблоном, которое мы
рассмотрим значительно подробнее позднее.

Напоследок, нам нужно изменить нашу функцию так, чтобы вызывать
=readExpr= и выводить на печать результат (необходимо добавить =import
System= в начале файла):

#+begin_src haskell
  main :: IO ()
  main = do args <- getArgs
            putStrLn (readExpr (args !! 0))
#+end_src

В итоге наша программа должна преобрести следующий вид:
#+CAPTION: Простейший парсер (simpleparser1.hs)
#+begin_src haskell
  module Main where

  import System.Environment(getArgs)
  import Text.ParserCombinators.Parsec hiding (spaces)

  main::IO()
  main= do
    args <- getArgs
    putStrLn (readExpr$ args !! 0)

  symbol :: Parser Char
  symbol = oneOf "!#$%&|*+-/:<=>?@^_~"

  readExpr :: String -> String
  readExpr input = case parse symbol "lisp" input of
      Left err -> "No match: " ++ show err
      Right val -> "Found value"

#+end_src

Теперь можно запустить нашу программу:

#+BEGIN_EXAMPLE
  [USER ~]$ ghc -o simple_parser simpleparser1.hs
  [USER ~]$ ./simple_parser $
  Found value
  [USER ~]$ ./simple_parser a
  No match: "lisp" (line 1, column 1):
  unexpected "a"
#+END_EXAMPLE

** Обрабатываем пробелы
Далее мы добавил несколько улучшений в наш синтаксический анализатор,
которые позволят нам разбирать более сложные выражения. В текущем
состоянии наш синтаксический анализатор неправильно отрабатывает, если
перед распознаваемыми символами есть пробелы:

#+BEGIN_EXAMPLE
  [USER ~]$ ./simple_parser "   %"
  No match: "lisp" (line 1, column 1):
  unexpected " "
#+END_EXAMPLE

Давайте исправим это, просто игнорируя пробелы.

Сначала определим синтаксический анализатор, который распознает любое
число пробелов. Кстати, именно поэтому мы указали =hiding (spaces)=,
когда импортировали библиотеку Parsec: в ней уже есть функция
«[[http://www.cs.uu.nl/~daan/download/parsec/parsec.html#spaces][spaces]]», однако она делает не совсем то, что нам нужно. (Вообще-то,
есть еще синтаксический анализатор [[http://www.cs.uu.nl/~daan/download/parsec/parsec.html#lexeme][lexeme]], который делает в точности
то, что нам нужно, однако мы проигнорируем этот факт в учебных целях.)

#+begin_src haskell
  spaces :: Parser ()
  spaces = skipMany1 space
#+end_src

Так же как функции могут быть переданы в качестве параметров другой
функции, мы можем поступить с действиями. Здесь мы передаем Parser
действие [[http://www.cs.uu.nl/~daan/download/parsec/parsec.html#space][space]] в качестве параметра в Parser действие [[http://www.cs.uu.nl/~daan/download/parsec/parsec.html#skipMany1][skipMany1]], чтобы
получить Parser, который будет распознавать один или несколько
пробелов.

Теперь давайте исправим нашу функцию для анализа, чтобы она
использовала новый синтаксический анализатор:

#+begin_src haskell
  readExpr input = case parse (spaces >> symbol) "lisp" input of
    Left err -> "No match: " ++ show err
    Right val -> "Found value"
#+end_src

Мы уже встречались с оператором >> («оператор связывания») во втором
уроке, там упоминалось, что он используется для "закулисного"
связывания строк в блоке do. Здесь мы используем его явно, чтобы
скомбинировать наши парсеры пробелов и символов. Однако, это
связывание имеет принципиально различную семантику в монадах IO и
Parser. В монаде Parser связывание значит «Попытаться сопоставить
данные с первым парсером, потом, оставшиеся данные попытаться
сопоставить со вторым и выдать ошибку, если сопоставление с обоими
провалилось.» В общем, связывание будет вызывать разный эффект в
разных монадах; оно задумывалось как обобщенный способ
структурирования вычислений, поэтому оно должен быть обобщено
настолько, чтобы вместить все возможные типы вычислений. За
подробностями о том, что действительно делает этот оператор,
обращайтесь к документации по монадам.

Скомпилируем и запустим код. Стоит отметить, что из за того, что
мы определили пробел с помощью skipMany1, наш парсер не будет распознавать
обычный одиночный сивол, прийдется поставить один или несколько пробелов вначале.
Что же, посмотрим, что получилось:

#+BEGIN_EXAMPLE
  [USER ~]$ ghc -o simple_parser chapter2.hs
  [USER ~]$ ./simple_parser "   %"
  Found value
  [USER ~]$ ./simple_parser %
  No match: "lisp" (line 1, column 1):
  unexpected "%"
  expecting space
  [USER ~]$ ./simple_parser "   abc"
  No match: "lisp" (line 1, column 4):
  unexpected "a"
  expecting space
#+END_EXAMPLE

** Возвращаем значение
Сейчас наш парсер не делает ничего полезного - лишь говорит нам,
распознона строка или нет. Обычно, мы хотели бы получить нечто большее
на выходе парсера: хотелось бы, чтобы парсер конвертировал данные,
поданые на вход в структуру, удобную для обработки. В этом разделе мы
научимся определять такие структуры и модифицируем наш парсер, чтобы
он возвращал нам такой тип данных.

Первым делом определим тип данных, настолько общий, чтобы он мог
содержать любую конструкцию Lisp'a: 

#+begin_src haskell
  data LispVal = Atom String
               | List [LispVal]
               | DottedList [LispVal] LispVal
               | Number Integer
               | String String
               | Bool Bool
#+end_src

Это пример /алгебраического типа данных/: он определяет набор
возможных значений типа LispVal. Каждая из перечисленных альтернатив
(называется /конструктор/, конструкторы разделены символом =|=) содержит
название конструктора, идущее первым, и типы данных, хранящиеся в
переменной, созданной с помощью этого конструктора. В данном случае,
тип =LispVal= может быть представлен как:
1. =Atom=, содержащий внутри название атома
2. =List=, хранящий внутри список любых значений LispVal (в Haskell
   списки обозначаются квадратными скобками); В Scheme его также
   называют /правильным списком/
3. =DottedList=, представляемый в Scheme в виде =(a b . c)=; также
   называется /неправильным списком/. Представляет список, последнее
   значение которого (то, что после точки) хранится в отдельной ячейке
4. =Number=, хранит целое число, представленное в Haskell типом
   Integer и Int.
5. =String=, содержит строку, представленную в Haskell классом String
6. =Bool=, содержит булево значение, представленное в Haskell типом
   Bool

#+begin_src haskell

#+end_src


** Рекурсивный парсинг: обрабатываем списки и многоточия

** Упрежнения
#+begin_src haskell

#+end_src
